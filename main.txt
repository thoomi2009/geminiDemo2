package main

import (
	"context"
	"github.com/google/generative-ai-go/genai"
	"github.com/joho/godotenv"
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"log"
	"net/http"
	"os"
)

type Message struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

var (
	defaultAddr  = ":8080"
	addr         string
	apiKey       string
	genaiContent context.Context
	genaiClient  *genai.Client
	genaiErr     error
)

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}
	addr = os.Getenv("ADDR")
	if addr == "" {
		addr = defaultAddr
	}
	apiKey = os.Getenv("API_KEY")
	if apiKey == "" {
		log.Fatal("Error genai api_key")
	}

	//genaiContent = context.Background()
	//genaiClient, genaiErr = genai.NewClient(genaiContent, option.WithAPIKey(apiKey))
	//if genaiErr != nil {
	//	log.Fatal(genaiErr)
	//}
	//defer func(genaiClient *genai.Client) {
	//	err := genaiClient.Close()
	//	if err != nil {
	//
	//	}
	//}(genaiClient)

	e := echo.New()
	e.Use(middleware.Logger())
	e.Use(middleware.Recover())

	e.GET("/", hello)
	e.GET("/ping", ping)
	// e.GET("/text", text)

	e.Logger.Fatal(e.Start(addr))
}

func hello(c echo.Context) error {
	return c.JSON(http.StatusOK, &Message{
		Code:    200,
		Message: "welcome",
	})
}

func ping(c echo.Context) error {
	return c.JSON(http.StatusOK, &Message{
		Code:    200,
		Message: "pong",
	})
}
